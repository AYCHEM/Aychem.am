<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
  <title>Mailpile: The Mailpile Blog</title>
  <link>http://www.mailpile.is/blog/</link>
  <item>
    <title>Rebooting the Mailpile Development Process</title>
    <link>http://www.mailpile.is/blog/2016-09-23_Rebooting_Mailpile_Development.html</link>
    <description>&lt;p&gt;Hello again!&lt;/p&gt;
&lt;p&gt;As warned about in our last blog post, development has been on hiatus
for the last few months as I moved to (and from) Iceland, bought and
sold a house and helped the Icelandic Pirate Party prepare for the
up-coming parliamentary elections. It was frankly, an exhausting summer
and I was sad not to have any time for Mailpile.&lt;/p&gt;
&lt;p&gt;But it&#39;s the summer is well and truly over, and I&#39;m back. Mailpile is
again one of my top priorities.&lt;/p&gt;
&lt;p&gt;I&#39;ve warmed up by responding to a few issues
&lt;a href=&#34;https://github.com/mailpile/Mailpile&#34;&gt;on Github&lt;/a&gt;,
fixing a couple of simple bugs and reconnecting with people on
the #mailpile IRC channel on Freenode.&lt;/p&gt;
&lt;p&gt;Taking a break is almost always healthy for a project, as it makes
room for new insights and perspective.&lt;/p&gt;
&lt;p&gt;I&#39;m still in the process of &#34;rebooting&#34; the development effort, but I&#39;ve
already decided to make at least one change - I will take advantage of
&lt;a href=&#34;https://help.github.com/articles/reviewing-changes-in-pull-requests/&#34;&gt;Github&#39;s new code-review
tools&lt;/a&gt;
to get community members to review my own work. This should improve the
code quality in Mailpile, while helping spread knowledge and
understanding of the code to a wider group of people - over time
improving the project&#39;s
&#34;&lt;a href=&#34;https://en.wikipedia.org/wiki/Bus_factor&#34;&gt;bus factor&lt;/a&gt;&#34;. A long-time
contributor, Jocelyn Delande, has volunteered to be my first reviewer,
and hopefully more people will pitch in over time.&lt;/p&gt;
&lt;p&gt;More soon. It&#39;s good to be back!&lt;/p&gt;</description>
    <pubDate>Fri, 23 Sep 2016 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>Delegate, Automate, Collaborate, Pirate</title>
    <link>http://www.mailpile.is/blog/2016-04-18_GUI-o-Matic_Automation_GnuPG_Piracy.html</link>
    <description>&lt;p&gt;Avast! Be welcome to this latest irregular Mailpile status update!&lt;/p&gt;
&lt;p&gt;In this episode, I will discuss:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A Strategic Spin-Off Project&lt;/li&gt;
&lt;li&gt;Deletion and Tag Automation&lt;/li&gt;
&lt;li&gt;GnuPG Collaboration&lt;/li&gt;
&lt;li&gt;Piracy in Iceland&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Progress towards a release has been very slow. This is entirely due to
me being busy with other work - things that pay the bills, looking
after my lovely baby daughter, buying an apartment and moving to
Iceland. I&#39;m swamped!&lt;/p&gt;
&lt;p&gt;As I am often exhausted and pressed for time, I have had a hard time
sticking to anything resembling a schedule and have basically indulged
any vaguely productive impulses, rather than worry about roadmaps.&lt;/p&gt;
&lt;p&gt;So if this doesn&#39;t look like progress towards a release, you&#39;re probably
right. I&#39;ve been very distracted. But it&#39;s progress all the same!&lt;/p&gt;
&lt;h2&gt;A Strategic Spin-Off Project&lt;/h2&gt;
&lt;p&gt;As mentioned before, Mailpile&#39;s desktop integration on Mac OS X and
Windows is currently unacceptable and needs a lot of work.&lt;/p&gt;
&lt;p&gt;We do have some code, however, and &lt;a href=&#34;https://github.com/mailpile/Mailpile/issues/1514&#34;&gt;a rough
design&lt;/a&gt;. In order to
encourage people to help out (and maximize the utility of the code
we&#39;ve already written), I spun off the existing GUI code into a separate
project: &lt;a href=&#34;https://github.com/mailpile/gui-o-matic&#34;&gt;GUI-o-Matic&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This should both lower the barrier to entry and encourage contributions;
You no longer need to check out all of Mailpile to hack on the
GUI-o-Matic. And because it&#39;s a stand-alone utility, it&#39;s more likely
that other projects will want to make use of it. We hope!&lt;/p&gt;
&lt;p&gt;If you&#39;ve ever wanted an easy way to add a cross-platform desktop
graphical user-interface to your code (not just Python!), take a look:
&lt;a href=&#34;https://github.com/mailpile/gui-o-matic&#34;&gt;GUI-o-Matic&lt;/a&gt; is a bit like
&#34;&lt;a href=&#34;https://www.linuxjournal.com/article/2807&#34;&gt;dialog&lt;/a&gt;&#34; for modern desktop
environments.&lt;/p&gt;
&lt;p&gt;Old farts will understand.&lt;/p&gt;
&lt;h2&gt;Deletion and Tag Automation&lt;/h2&gt;
&lt;p&gt;Did you know the current incarnation of Mailpile cannot actually delete
e-mail?  It&#39;s true. This was actually a deliberate, conservative choice
to avoid losing valuable data during development. It was never meant to
be permanent, but temporary hacks do tend to outstay their welcome...&lt;/p&gt;
&lt;p&gt;In the context of shipping 1.0... well, a mail client isn&#39;t really a
mail client if it cannot delete mail, is it? More pressingly, a tool
which aims to safeguard user privacy has to support the most basic
privacy feature of all: deleting unwanted data.&lt;/p&gt;
&lt;p&gt;So I decided to (yet again) break the feature freeze and implement
message deletion.&lt;/p&gt;
&lt;p&gt;This had a knock-on effect. Mailpile&#39;s deletion strategy was supposed
to be similar to that of other webmail: once things have sat in the
Trash for a while, they get deleted automatically. Similarly, messages
should automatically move from Spam to Trash after a while and blank
drafts should get purged and deleted.&lt;/p&gt;
&lt;p&gt;So Mailpile needed a way to a) detect messages had been untouched for a
period of time and b) a way to trigger actions once a) was satisfied for
a message carrying a particular tag.&lt;/p&gt;
&lt;p&gt;So now Mailpile has exactly that!&lt;/p&gt;
&lt;p&gt;The search-engine is used to keep a record of when a message tags were
last modified, and each tag now has an automation section which
specifies a number of days and an action to perform. A few times a day,
Mailpile will search for idle messages in tags with automation enabled
and either retag or delete the matching messages.&lt;/p&gt;
&lt;p&gt;While I was implementing the configuration interface for this, I also
added an option to enable statistical auto-tagging for any tag, as
described in &lt;a href=&#34;2014-01-12_A_Plan_For_Spam.html&#34;&gt;A Plan for Spam ... and
Bacon!&lt;/a&gt;, and exposed a few more of the
technical tag settings in the Tag settings editor. All features that
already existed, but weren&#39;t really accessible.&lt;/p&gt;
&lt;p&gt;So there we go, tags now have automation and you don&#39;t need any
command-line black magic to create your own statistical tagging or
time-based workflows.&lt;/p&gt;
&lt;p&gt;These capability are now available to all tags, including user-created
ones. Some of the potential use-cases include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deleting Trash after a while&lt;/li&gt;
&lt;li&gt;Moving Spam to Trash&lt;/li&gt;
&lt;li&gt;Moving untouched blank drafts to Trash&lt;/li&gt;
&lt;li&gt;Creating statistical categories for promotions or paperwork&lt;/li&gt;
&lt;li&gt;Creating a &#34;Postponed&#34; tag which hides mail from view for a few days&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now we just need an auto-responder and Mailpile will be able to
automatically recognize and reply to tech support requests that have
been unanswered for more than a week...&lt;/p&gt;
&lt;p&gt;(In the process I also fixed bugs in the bayesian auto-trainer, the
periodic scheduler that triggers it and the tag editing tools the UI -
proper release work after all!)&lt;/p&gt;
&lt;h2&gt;GnuPG Collaboration&lt;/h2&gt;
&lt;p&gt;I write this, sitting on a train back home from London.&lt;/p&gt;
&lt;p&gt;I was in London today to meet with Neal of &lt;a href=&#34;https://www.gnupg.org/&#34;&gt;the GnuPG
project&lt;/a&gt;. We discussed how the projects could
collaborate more closely in the future and some of the
&lt;a href=&#34;2015-02-26_Revisiting_the_GnuPG_discussion.html&#34;&gt;difficulties&lt;/a&gt; Mailpile
has had integrating with GnuPG.&lt;/p&gt;
&lt;p&gt;It was an excellent meeting and I&#39;m optimistic that once GnuPG 2.1 (or
2.2) becomes widespread, Mailpile will be able to make full use of it
without any horrible hacks.&lt;/p&gt;
&lt;p&gt;Conversations will continue!&lt;/p&gt;
&lt;h2&gt;Piracy in Iceland&lt;/h2&gt;
&lt;p&gt;Finally, some bad news.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://grapevine.is/mag/column-opinion/2016/04/10/600-silver-lions-how-iceland-was-betrayed-again/&#34;&gt;Iceland&#39;s government is
broken&lt;/a&gt;
and I feel an obligation to help fix it. I will be dedicating some time
this summer to helping &lt;a href=&#34;http://www.piratar.is/&#34;&gt;the local Pirate Party&lt;/a&gt;
prepare for our next elections. Mostly I&#39;ll be working behind the scenes
on internal party tools, but this inevitably means I will continue being
distracted from Mailpile work. But don&#39;t worry, I&#39;m &lt;em&gt;not&lt;/em&gt; running for a
seat in parliament. ;-)&lt;/p&gt;
&lt;p&gt;If you can help out in some way to help pick up the slack, please get
in touch on #mailpile on Freenode.&lt;/p&gt;
&lt;p&gt;That&#39;s it for now, thanks for reading.&lt;/p&gt;
&lt;p&gt;Time to pack some boxes and move to Iceland!&lt;/p&gt;</description>
    <pubDate>Mon, 18 Apr 2016 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>Python SSL Woes</title>
    <link>http://www.mailpile.is/blog/2016-03-24_Python_SSL_Woes.html</link>
    <description>&lt;p&gt;There&#39;s not much to say about progress this week; things have been slow,
but most of my hacking time has been spent getting frustrated by SSL and
Python.&lt;/p&gt;
&lt;p&gt;So following in our Grand Tradition of biting the hand that feeds us and
publicly complaining about libraries and tools we rely upon, I am going to
write a few words about the state of SSL/TLS support in Python.&lt;/p&gt;
&lt;p&gt;This rant was (sort of) requested by Christian, one of the maintainers
of the Python SSL module. Hi Christian, thanks for all your hard work! ;-)&lt;/p&gt;
&lt;h3&gt;Why We Care&lt;/h3&gt;
&lt;p&gt;SSL (or TLS) is the technology used to secure how Mailpile communicates with
online mail servers, and is also used when downloading data from the web,
whether for key discovery or things like user avatars and icons.&lt;/p&gt;
&lt;p&gt;The e-mail world is a bit different from the web, in that the use of encryption
is somewhat less mature. Self-signed certificates for mail servers are more
common than on the web and use of encryption for e-mail in transit tends to be
more opportunistic, so the &#34;standard&#34; SSL key management strategies employed by
web-servers and web-browsers don&#39;t really apply.&lt;/p&gt;
&lt;p&gt;The current iteration of the Mailpile code-base doesn&#39;t validate SSL
certificate at all when connecting to SMTP or IMAP servers; this means any
motivated attacker can easily perform a man-in-the-middle attack to listen
in on, or modify, sent or downloaded e-mail.&lt;/p&gt;
&lt;p&gt;Fixing this requires validating the server certificates somehow; for those
that have a certificate issued by one of the known certificate authorities,
this is largely the same process as on the web. However, a large number of
e-mail servers use self-signed certificates, particularly within the
enthusiast community which is a significant part of the people we expect
to adopt Mailpile. So we need to handle those certificates gracefully as
well.&lt;/p&gt;
&lt;p&gt;While working on this, I yet again encountered limitations and bugs in
Python&#39;s standard ssl code.&lt;/p&gt;
&lt;h3&gt;Issue 1: Python 2.6, 2.7.3, ...&lt;/h3&gt;
&lt;p&gt;It is incredibly frustrating that Python 2.7.9 was the first release of
Python that had semi-functional SSL support in the standard library.
Previous versions were almost completely insecure and did not expose the
API hooks required to improve the situation.&lt;/p&gt;
&lt;p&gt;Since I&#39;m pretty sure nobody in the Python community has a time machine,
there&#39;s not much the Python community can do about this.  All we can do
is thank the people that are working to fix things today - and get those
fixes used!&lt;/p&gt;
&lt;p&gt;On that note: distributions that are shipping Python 2.7 but refuse to
issue a security fix to upgrade to the latest point release are
&lt;strong&gt;failing to protect their users&lt;/strong&gt;. At least back-port the affected
modules, for crying out loud!&lt;/p&gt;
&lt;h3&gt;Angry Tweeting&lt;/h3&gt;
&lt;p&gt;In a moment of drama, I tweeted the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The more I use Python&#39;s ssl module, the more obvious it is that
nobody ever used it for anything serious. Even the 2.7/3.x code
just fails.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Those are fighting words and I&#39;m sorry if they offended anyone.
Christian responded with a very level-headed request for details, which
in turn prompted this post.&lt;/p&gt;
&lt;p&gt;The frustration I expressed there, was to a large degree related to
Issue 1 above, but the comment on 2.7 and 3.x needs explaining. I&#39;ll
talk about the big picture first, with critiques of individual methods
further down.&lt;/p&gt;
&lt;p&gt;This should by no means be considered an exhaustive review of the Python
ssl module; but I hope at least some of my suggestions are actionable
and constructive.&lt;/p&gt;
&lt;p&gt;One caveat: I haven&#39;t checked the Python 2.7.11 code, this critique is
based on reading the sources from 2.7.10 as installed by my distro&#39;s
package manager. Some of these issues may have been fixed, which would
bring me back to Issue 1.&lt;/p&gt;
&lt;h3&gt;Issue 2: import ssl, poplib, smtplib, imaplib&lt;/h3&gt;
&lt;p&gt;I am going to charitably assume that the ssl backport in 2.7.9 took care
to preserve compatibility and that is why imaplib, poplib and smtplib
(all used by Mailpile) still make insecure SSLv3 connections.&lt;/p&gt;
&lt;p&gt;Unless I am reading the code completely wrong, the more secure new
&#34;default SSL contexts&#34; are not actually used (see below for more
details). This is fixed in Python 3.x.&lt;/p&gt;
&lt;p&gt;Fair enough, backwards compatibility is important! When forced to choose
between fixing a security hole and suddenly breaking apps that used to
work, it&#39;s not obvious that security should always come first.&lt;/p&gt;
&lt;p&gt;Unless this was a mistake?&lt;/p&gt;
&lt;p&gt;Either way, the backported ssl module provides &lt;strong&gt;no mechanism for
changing this behaviour&lt;/strong&gt;, short of monkey-patching. That seems like a
pretty serious oversight, and one easily corrected with a global module
variable or two.&lt;/p&gt;
&lt;p&gt;More generally, the ssl module would benefit greatly from an API that
would allow an app to specify default behaviours and callbacks or hooks
for &#34;interesting events&#34;; allow more control and more introspection
without forcing all the other libraries to complicate their APIs.&lt;/p&gt;
&lt;h3&gt;Issue 3: Certificate Management&lt;/h3&gt;
&lt;p&gt;An e-mail client needs to be able to manage SSL certificates, including
self-signed ones.&lt;/p&gt;
&lt;p&gt;Showing my ignorance here, I couldn&#39;t figure out how to do this with the
Python ssl module until I got some helpful replies to my angry tweet.
Even then, the APIs I will need to work with if I stick with the
standard python ssl module are very awkward.&lt;/p&gt;
&lt;p&gt;I think it would be time very well spent to improve both the
documentation and the APIs (see below) for this use-case.&lt;/p&gt;
&lt;p&gt;Googling for Python ssl examples will in the vast majority of cases show
people disabling certificate verification entirely.  Surely that is not
what we want people to do!  The official API documentation is the most
effective place to combat these bad examples.&lt;/p&gt;
&lt;h3&gt;Issues 4..N&lt;/h3&gt;
&lt;p&gt;These are random warts in the ssl API. Some major, some minor.&lt;/p&gt;
&lt;h4&gt;pydoc ssl&lt;/h4&gt;
&lt;p&gt;A typo: the method &#34;fetch_server_certificate&#34; does not exist.&lt;/p&gt;
&lt;h4&gt;ssl.get_server_certificate&lt;/h4&gt;
&lt;p&gt;If asked to validate, this method may throw an exception instead
of returning the certificate. This is unhelpful.&lt;/p&gt;
&lt;p&gt;The data returned by this method is a binary blob; the library
does not provide any utilities for decoding the contents.&lt;/p&gt;
&lt;h4&gt;ssl.SSLError&lt;/h4&gt;
&lt;p&gt;This exception is raised when a certificate fails to validate.
However, it doesn&#39;t tell you anything about the certificate
itself.&lt;/p&gt;
&lt;p&gt;Including the certificate as an attribute of the exception would
allow for more nuanced and meaningful error handling.&lt;/p&gt;
&lt;p&gt;Details as to why the validation failed would be nice too.&lt;/p&gt;
&lt;h4&gt;ssl.SSLSocket.getpeercert&lt;/h4&gt;
&lt;p&gt;As far as I can tell, this is the only method provided which
parses an SSL certificate, making any certificate handling code
reliant on the network. This is bad, but isn&#39;t the only problem
here.&lt;/p&gt;
&lt;p&gt;Aside from crypto geeks, few consumers of this API are likely to
care about the details of a validated certificate. It&#39;s trusted,
let&#39;s get on with things! It&#39;s the certificate that fails to
validate that you need to know more about, so you can tell the
user something useful.&lt;/p&gt;
&lt;p&gt;Unfortunately, this method completely refuses to return
structured information about a certificate unless it has been
validated first. And of course, if validation is enabled then an
exception will be thrown before this method can be called.&lt;/p&gt;
&lt;p&gt;It appears the workaround is to first use
&lt;code&gt;ssl.get_server_certificate&lt;/code&gt; and then provide the certificate as
CA to &lt;code&gt;ssl.SSLContext&lt;/code&gt; or &lt;code&gt;ssl.wrap_socket&lt;/code&gt;, so &lt;code&gt;getpeercert&lt;/code&gt;
will return actual information.&lt;/p&gt;
&lt;p&gt;This is both non-obvious and quite convoluted.&lt;/p&gt;
&lt;p&gt;This method should always return structured data when requested,
but backwards compatibility concerns will probably preclude that.
:-(&lt;/p&gt;
&lt;p&gt;Either way, an standalone method that just parses certificates
would be very nice to have.&lt;/p&gt;
&lt;h4&gt;ssl.create_default_context&lt;/h4&gt;
&lt;p&gt;This method confused me.&lt;/p&gt;
&lt;p&gt;At first I thought this method would be used by various Python libraries
that support the SSL protocol... and wanted to figure out how to
customize the output of this so my app would have control over how SSL
was done.&lt;/p&gt;
&lt;p&gt;Turns out I was completely wrong on all counts.&lt;/p&gt;
&lt;p&gt;I read the ssl library source and found that the stdlib modules are
expected to use the undocumented variable &lt;code&gt;_create_stdlib_context&lt;/code&gt; which
maps to the undocumented method named &lt;code&gt;_create_unverified_context&lt;/code&gt;.
Except for http.client, which should use &lt;code&gt;_create_default_https_context&lt;/code&gt;
which maps to &lt;code&gt;ssl.create_default_context&lt;/code&gt; after all...&lt;/p&gt;
&lt;p&gt;Feeling somewhat confused, I read the Python 2.7.10 sources for imaplib,
smtplib and poplib. Turns out none of them use SSL contexts at all! They
all just call &lt;code&gt;ssl.wrap_socket&lt;/code&gt;, which in turn uses none of the above
methods...&lt;/p&gt;
&lt;p&gt;Argh. Okay. :-(&lt;/p&gt;
&lt;p&gt;It looks like those comments were just back-ported from 3.x, without the
libraries themselves getting updated. It&#39;s confusing, but the main
take-away is that the backport appears to have failed to secure any of
the standard libraries except for httplib (and ftplib).&lt;/p&gt;
&lt;p&gt;I raise this issue to illustrate how hard it is for an app developer to
truly understand &lt;em&gt;how&lt;/em&gt; SSL/TLS is being used within their app, let alone
have control over it. It&#39;s frustrating, to say the least.&lt;/p&gt;
&lt;p&gt;My original wish, to be able to control the default context returned by
this method, would be a great feature request if this method were
actually used! It&#39;s not. However, I think the feature request still
makes sense - it&#39;s just more work!&lt;/p&gt;
&lt;h3&gt;What is Mailpile Doing About it?&lt;/h3&gt;
&lt;p&gt;We are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Talking to the Python devs (complaining)&lt;/li&gt;
&lt;li&gt;Planning to publish a TOFU-for-TLS module&lt;/li&gt;
&lt;li&gt;Planning to publish our monkey-patching magic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Step 1 is pretty much done; I submitted an early draft of this blog post
to the current maintainers of the Python ssl module. In spite of the
fact that it contained an extended and distracting rant about the SSL
community in general (which I in the end decided not to post), they
responded well to the technical points and gave constructive feedback.&lt;/p&gt;
&lt;p&gt;The main take-away was that apps like Mailpile, that need control over
how SSL connections are made and want to implement non-standard
(non-web) certificate verification models, are not well served by the
standard Python modules. So we&#39;ll be using pyOpenSSL instead and
patching or subclassing the protocol libraries.&lt;/p&gt;
&lt;p&gt;The TOFU code and policy management logic will be released separately
from Mailpile and under a liberal license, so the community can benefit
or point and laugh, whichever seems more appropriate. I don&#39;t know
whether this will happen before or after 1.0.&lt;/p&gt;
&lt;p&gt;Stay tuned. :-)&lt;/p&gt;</description>
    <pubDate>Thu, 24 Mar 2016 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>Status Update and PyCon SK report</title>
    <link>http://www.mailpile.is/blog/2016-03-16_PyCon_SK.html</link>
    <description>&lt;p&gt;Apologies for how quiet this blog has been lately; the last couple of
months I have been very busy with fatherhood, preparing to move countries
and making sure &lt;a href=&#34;https://pagekite.net/&#34;&gt;my other job&lt;/a&gt; gets done.&lt;/p&gt;
&lt;p&gt;I do expect development on Mailpile to pick up again over the next few
weeks and this blog will start getting regular updates again as well.
There will be a lull again in the latter half of April, when my little
family and I move back to Iceland.&lt;/p&gt;
&lt;h3&gt;Release Candidate Progress&lt;/h3&gt;
&lt;p&gt;During the first few weeks of 2016, quite a lot of progress was made on
the release. My focus has been to first complete the tasks most likely
to generate new text in the interface, so that our translation teams
would have enough time to do their jobs.&lt;/p&gt;
&lt;ul class=&#34;square&#34;&gt;
&lt;li&gt;We are now very close to having working Debian packages that comply with
    offcial Debian policies, thanks to the heroic efforts of Alexandre Viau.
    This means Mailpile 1.0 should be in Debian-testing almost from day
    one!&lt;/li&gt;
&lt;li&gt;The most important privacy and security settings are now explained and can
    be configured by the user. This includes Tor support and expressing
    preferences on what is encrypted and whether external services like
    Gravatar are used or not.&lt;/li&gt;
&lt;li&gt;Improvements were made to the Event Log and a network activity viewer
    was exposed to facilitate troubleshooting.&lt;/li&gt;
&lt;li&gt;Jack Dodds contributed support for parsing stand-alone PGP encrypted and
    signed attachments.&lt;/li&gt;
&lt;li&gt;Many bugs got fixed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of this work may have slightly circumvented the feature-freeze, but
these are important enough features that I&#39;m not too fussed about it.&lt;/p&gt;
&lt;p&gt;I think I am almost done with the strings work and aim to declare a
string freeze this week or next. The next task will then be bug hunting,
putting the last touches on our Debian package and set up a build-bot to
autogenerate packages.&lt;/p&gt;
&lt;h3&gt;PyCon SK&lt;/h3&gt;
&lt;p&gt;Last weekend I was happy to attend Slovakia&#39;s first PyCon.&lt;/p&gt;
&lt;p&gt;I had been invited to speak about some of the challenges involved in making
Free Software development a full time job; one of the stories I told was of
course the story of Mailpile so far. The talk was well received and I had many
excellent conversations afterwards.&lt;/p&gt;
&lt;p&gt;I was very impressed with how professional the conference was, considering it
was their first ever PyCon. The organizers should be proud of themselves!&lt;/p&gt;
&lt;p&gt;As usual, I made sure to perform some usability tests, answer questions,
demonstrate Mailpile and help people set up the app. Our
&lt;a href=&#34;https://github.com/mailpile/Mailpile/wiki/Getting-started-on-linux&#34;&gt;getting-started-on-linux&lt;/a&gt;
wiki page now mentions Fedora! And of course I gave away lots of stickers.&lt;/p&gt;
&lt;p&gt;Fixes suggested by the usability tests are already in Github.&lt;/p&gt;</description>
    <pubDate>Wed, 16 Mar 2016 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>Happy Frozen New Year!</title>
    <link>http://www.mailpile.is/blog/2016-01-01_Happy_Frozen_New_Year.html</link>
    <description>&lt;p&gt;Happy New Year everyone, and thank you for all the support and good
times in 2015!&lt;/p&gt;
&lt;p&gt;This fall, we announced that we would try and get Mailpile 1.0 for Linux
released in 2015. We&#39;re not quite there, but we&#39;re so close we can smell
it...&lt;/p&gt;
&lt;h2&gt;Everybody Freeze!&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#39;/files/2016-01-Mailpile-on-Ice.jpg&#39;&gt;&lt;/p&gt;
&lt;p&gt;Mailpile is now in a state of &lt;strong&gt;Feature Freeze&lt;/strong&gt;, which means the only
development expected until 1.0 is bugfixes, &#34;sweeping things under the
rug&#34; (hiding features if they have bugs that need more than 1-2 hours of
work to fix), packaging work, translations and documentation.&lt;/p&gt;
&lt;p&gt;How long we stay in this state depends on how many showstopper bugs we
find, which is impossible to predict. But the work I know needs to be
done should be doable in January.&lt;/p&gt;
&lt;p&gt;Progress is being made!&lt;/p&gt;
&lt;h3&gt;New Year News&lt;/h3&gt;
&lt;p&gt;Some random news and updates unrelated to the Big Freeze:&lt;/p&gt;
&lt;h4&gt;Hackathon - thanks!&lt;/h4&gt;
&lt;p&gt;We&#39;d like to thank everyone who took part in our hackathon at the 32C3
conference in Hamburg last week!&lt;/p&gt;
&lt;p&gt;In particular, thanks to Daniel for organizing, and the &lt;a href=&#34;http://www.ccc.de&#34;&gt;Chaos Computer
Club&lt;/a&gt; for organizing on such an amazing event - my
wife and I followed along from home using the live streams.&lt;/p&gt;
&lt;p&gt;If you would like to organize a Mailpile hackathon at your local LUG,
get in touch - we&#39;re happy to mail out swag kits (T-shirts and stickers)
to folks who are willing to help expand our community.&lt;/p&gt;
&lt;h4&gt;Mac support&lt;/h4&gt;
&lt;p&gt;Many people have asked for an ETA for Mac support. The short answer is: we
don&#39;t know. We don&#39;t know because a) we&#39;re terrible at plans and deadlines
(sorry!) and b) nobody has volunteered to help yet.&lt;/p&gt;
&lt;p&gt;Unless someone offers to help, Mac work waits until I have time after the 1.0
for Linux. This means work will &lt;em&gt;begin&lt;/em&gt; in February &lt;em&gt;at the earliest&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;CloudFleet on IndieGoGo&lt;/h4&gt;
&lt;p&gt;Our friends at &lt;a href=&#34;https://www.cloudfleet.io/&#34;&gt;CloudFleet&lt;/a&gt; are running &lt;a href=&#34;https://www.indiegogo.com/projects/cloudfleet-your-private-encrypted-cloud-at-home&#34;&gt;a
crowdfunding campaign&lt;/a&gt;
for their hardware + online services autonomous personal cloud solution.
&lt;a href=&#34;https://www.indiegogo.com/projects/cloudfleet-your-private-encrypted-cloud-at-home&#34;&gt;Check it out!&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We have a vested interest: CloudFleet have been one of the most active
supporters of Mailpile so far, both contributing cash and code; the
Apache integration I announced in the last post was to a large degree
based on their work. CloudFleet are also likely to be the first
consumer-focused product to bring Mailpile to a general audience. So
give them your support if you can!&lt;/p&gt;</description>
    <pubDate>Fri, 01 Jan 2016 12:00:00 +0000</pubDate>
  </item>
</channel></rss>