<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
  <title>Mailpile: The Mailpile Blog</title>
  <link>http://www.mailpile.is/blog/</link>
  <item>
    <title>More thoughts on working with GnuPG</title>
    <link>http://www.mailpile.is/blog/2015-02-26_Revisiting_the_GnuPG_discussion.html</link>
    <description>&lt;p&gt;Smári&#39;s &lt;a href=&#34;/blog/2014-10-07_Some_Thoughts_on_GnuPG.html&#34;&gt;blog post on working with
GnuPG&lt;/a&gt; got a fair bit of
attention and continues to be referenced in various posts and
discussions online.&lt;/p&gt;
&lt;p&gt;Responses have varied, from vehement agreement, to a &lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-users/2015-February/052401.html&#34;&gt;friendly and
thoughtful response from Werner
himself&lt;/a&gt;,
to random folks on the Internet people calling us incompetent for using
the GnuPG command-line tool directly instead of some library or other.&lt;/p&gt;
&lt;p&gt;I would like to address that last group specifically:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If you think a command-line interface is not an API, then you are
   ignoring the millions of lines of shell scripts that keep the Internet
   running. You are wrong. Please consult your nearest sysadmin for an
   attitude readjustment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process separation is one of the cornerstones of good security
   design. Heartbleed and many other vulnerabilities are direct results
   of crypto and keys living the same process space as protocol and
   application logic. We initially chose to invoke GnuPG (and OpenSSL
   as well) as external tools for such security reasons, even though we
   knew it would cost us some performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We looked at the libraries, encountered an apalling lack of
   documentation and hoped the command-line interface would be nicer to
   work with. Learning one API beats having to learn two, and there was
   no way we could do this &lt;em&gt;without&lt;/em&gt; the GnuPG CLI - if only for
   debugging and tech support reasons.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Phew.&lt;/p&gt;
&lt;p&gt;Now that I&#39;ve gotten that off my chest... let&#39;s move on to some more
productive discussions!&lt;/p&gt;
&lt;h2&gt;Utility or Application?&lt;/h2&gt;
&lt;p&gt;Although I appreciated Werner&#39;s response to our post, I am afraid he
missed the forest for the trees. Probably because Smári wrote a lot
about some interesting, funky trees... :-)&lt;/p&gt;
&lt;p&gt;Fundamentally, I think Mailpile&#39;s difficulties stem from the fact that
GnuPG was not written with automation in mind. The tool is not written
as a unix utility, it is very much written as a user facing application,
a tool for humans.&lt;/p&gt;
&lt;p&gt;As such, it is a fantastic piece of engineering. If you understand how
public/private key encryption works and know what you want to do, odds
are GnuPG will help you get the job done. GnuPG&#39;s security track record
is solid and it is a tool people can rely on, as long as they take the
time to learn the basics and get used to the CLI.&lt;/p&gt;
&lt;p&gt;However, as a result of this design focus, many of GnuPG&#39;s automation
interfaces appear to be an afterthought. They are incomplete and often
difficult to work with. Consider that &#34;commands to create and sign keys
without any user interaction&#34; were brand new &lt;a href=&#34;http://lists.gnupg.org/pipermail/gnupg-announce/2014q4/000358.html&#34;&gt;in GnuPG 2.1 last
November&lt;/a&gt;.
GnuPG 2.1 is the development version of GnuPG and is not shipped by any
of the mainstream Linux distributions yet. I do applaud the fact that
these features are being added, but the fact that it happened 3 months
ago only supports my hypothesis: automation has to a great extent been
an afterthought to the GnuPG project.&lt;/p&gt;
&lt;p&gt;This has gotten worse over time, not better. In GnuPG 2.0, use of
&lt;code&gt;gpg-agent&lt;/code&gt; and &lt;code&gt;pinentry&lt;/code&gt; became mandatory and the assumption that the
tool is running in a desktop environment under human oversight pervades.
This is why Linux distros still keep shipping GnuPG 1.4.x - they rely on
automated PGP processing for package verification and other things which
GnuPG 2.0 just isn&#39;t suitable for.&lt;/p&gt;
&lt;p&gt;I worry that GnuPG 2.1 takes this even further still, &lt;a href=&#34;https://www.gnupg.org/faq/whats-new-in-2.1.html&#34;&gt;moving key
managment operations into the
agent&lt;/a&gt;. Also, as far
as I can tell, it doesn&#39;t matter whether we use the &lt;code&gt;gpgme&lt;/code&gt; library or
the command-line tool, those assumptions and behaviors are shared
throughout.&lt;/p&gt;
&lt;p&gt;Much of this is understandable, given GnuPG&#39;s historic roots and the
fact that it inherits many things from it&#39;s predecessor, PGP, which
itself predated modern graphical desktops and web apps. It is also
understandable, given the culture around PGP, where keys and passphrases
are magical holy talismans, so special that you need to constantly ask
the user for permission before invoking them.  GnuPG enforces this
culture by preventing apps from interfering with the flow of this
critical information, refusing to work without trusted pinentry.&lt;/p&gt;
&lt;p&gt;However, while GnuPG insists on controlling this part of the user
interface and treats automation as a 2nd class citizen, a side effect is
that the project actively thwarts efforts of others that want or need
alternate user interfaces.&lt;/p&gt;
&lt;p&gt;Mailpile is one such project.&lt;/p&gt;
&lt;h2&gt;Mailpile&#39;s pinentry woes&lt;/h2&gt;
&lt;p&gt;One of the cool things about Mailpile, is it functions not only in a
desktop environment, but also as a background process (receiving,
decrypting and indexing mail), and also as a remote web server which
allows the user to leave their mail and keys on a secure box in their
home, which they then access remotely over the network.&lt;/p&gt;
&lt;p&gt;This flexibility is key to our overall goals of providing people with
something that can match &#34;cloud based&#34; e-mail providers on features,
without compromising privacy and security.&lt;/p&gt;
&lt;p&gt;Unfortunately, the entire pinentry concept, where &lt;code&gt;gpg&lt;/code&gt; (via the
&lt;code&gt;gnupg-agent&lt;/code&gt;) displays a window prompting the user to enter a
passphrase, is completely and utterly incompatible with this. Popping up
a dialog on the user&#39;s Raspberry Pi, when the owner tries to read
encrypted mail from halfway across the world using his Android phone&#39;s
web browser, is never going to work.&lt;/p&gt;
&lt;p&gt;And even if it somehow did work, using a side-channel to authenticate
has very serious problems of its own.&lt;/p&gt;
&lt;p&gt;Consider the situation where a user wants to access Mailpile both
locally, and remotely: on the desktop, the &#34;just use pinentry&#34; dogma
tells us we should just trust GnuPG there (and GnuPG 2.x enforces this
policy).&lt;/p&gt;
&lt;p&gt;Well, what then happens when Mailpile is accessed remotely?&lt;/p&gt;
&lt;p&gt;Things fail.&lt;/p&gt;
&lt;p&gt;The benign failure mode is the user can&#39;t read encrypted mail because
they can&#39;t see the pinentry dialog. This makes the app unusable, but the
bug is still &#34;benign&#34; because it doesn&#39;t leak confidential data.&lt;/p&gt;
&lt;p&gt;There is another catastrophic (and real) failure mode: If the legitimate
user is logged on at the desktop and an attacker can access Mailpile&#39;s
web interface at the same time, then the attacker will be able to read
encrypted mail (or compose fraudulent signed mail) because the
&lt;code&gt;gpg-agent&lt;/code&gt; has keys cached and Mailpile has no way to communicate to
GnuPG that the remote access is somehow different from what happens
locally.&lt;/p&gt;
&lt;p&gt;This is really, really bad.&lt;/p&gt;
&lt;p&gt;This is why Mailpile only supports GnuPG 1.4.x at the moment: we haven´t
figured out how to make GnuPG 2.x operate in a secure fashion, since it
won&#39;t let us disable the agent.&lt;/p&gt;
&lt;p&gt;This whole issue has us scratching our heads and wondering what to do.
We&#39;ve gone from frustration to righteous anger, to just being rather
worried. If the GnuPG project is moving aggressively in a direction
which is fundamentally incompatible with projects like ours, what should
we do?  Drop PGP and try to implement S/MIME? Switch to something
interesting but unproven, like
&lt;a href=&#34;http://www.tedunangst.com/flak/post/reop&#34;&gt;reop&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;I just don&#39;t know.&lt;/p&gt;
&lt;p&gt;I could come up with some clever hacks to work around GnuPG&#39;s core
design; I could implement my own agent, I could try to cripple GnuPG
with weird environment variables or a custom GNUPG_HOME and config, or I
could even fork the project - but those &lt;em&gt;all&lt;/em&gt; feel like last resorts.&lt;/p&gt;
&lt;p&gt;I am currently revisiting whether I can get &lt;code&gt;gpgme&lt;/code&gt;-based code to avoid
the problems caused by the agent and side-channel auth. I am not too
optimistic. If that fails, then it&#39;s last resort time, or time to drop
PGP.&lt;/p&gt;
&lt;h2&gt;Is this fixable?&lt;/h2&gt;
&lt;p&gt;For the record, Mailpile is not the only project having problems -
questions about related issues are common &lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-users/2015-February/052754.html&#34;&gt;on the GnuPG-users mailing
list&lt;/a&gt;
and &lt;a href=&#34;https://stackoverflow.com/questions/8671099/how-to-bypass-pinentry-passphrase-screen-while-decrypting-a-file-using-gpgme&#34;&gt;elsewhere&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, I have yet to hear any of the GnuPG developers acknowledge that
this is even a concern, which is why I have taken the time to write this
post. I would like to humbly request that Werner and GnuPG consider
these issues, now that &lt;a href=&#34;http://www.propublica.org/article/the-worlds-email-encryption-software-relies-on-one-guy-who-is-going-broke&#34;&gt;they finally have a
budget&lt;/a&gt;.
(Congrats, by the way, you deserve it!)&lt;/p&gt;
&lt;p&gt;I really do think this can be fixed, if the GnuPG project agrees it is
worth doing. Some specific ideas that I think could help:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clearly separate the user interface aspects of GnuPG from the crypto
   and keychain management, so projects can use one without the other.
   Do not assume all apps interacting with a particular keychain want the
   same UI for authentication.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Treat the command-line interface of &lt;code&gt;gpg&lt;/code&gt; as if it were an API; keep
   it stable and machine friendly. There should be command-line
   alternatives to all of the interactive dialogs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make &lt;code&gt;gpgme-tool&lt;/code&gt; (which implements an API very similar to the JSON
   API requested by Smári in his post) a mandatory 1st class citizen of
   all GnuPG bundles (instead of &lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-devel/2014-December/029196.html&#34;&gt;doing this&lt;/a&gt;).
   We had no idea this tool existed, and I still can&#39;t find it for my
   distro (Ubuntu 14.04). Consider rolling this functionality into the
   &lt;code&gt;gpg&lt;/code&gt; binary itself to facilitate scripting and automation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are probably more, but those are my top three!&lt;/p&gt;
&lt;p&gt;Thanks for reading, I look forward to further discussions (most likley
&lt;a href=&#34;https://lists.gnupg.org/pipermail/gnupg-users/2015-February/052771.html&#34;&gt;on the GnuPG Users mailing
list&lt;/a&gt;).&lt;/p&gt;</description>
    <pubDate>Thu, 26 Feb 2015 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>Mailpile Beta II - the 4096 bit release</title>
    <link>http://www.mailpile.is/blog/2015-01-20_Mailpile_Beta_II_4096_bits.html</link>
    <description>&lt;p&gt;&lt;img src=&#34;/files/Beta-II.jpg&#34; border=&#34;0&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hello world and Happy New Year!&lt;/p&gt;
&lt;p&gt;The Mailpile team is happy to announce our second Beta release:
&lt;strong&gt;Mailpile Beta II&lt;/strong&gt; (version 0.4.2). We&#39;re still not at 1.0 (sorry...),
but much progress has been made and it is high time to update our public
offerings again.&lt;/p&gt;
&lt;p&gt;There was also a little security bug in the Beta, that we need to talk
about and address... but first, the good stuff!&lt;/p&gt;
&lt;h2&gt;Where Can You Get It?&lt;/h2&gt;
&lt;p&gt;The new release is availble from &lt;a href=&#34;/download/&#34;&gt;the Mailpile download
page&lt;/a&gt;, and the source is &lt;a href=&#34;https://github.com/mailpile/Mailpile/releases&#34;&gt;on
github&lt;/a&gt; as always.&lt;/p&gt;
&lt;p&gt;Please read &lt;a href=&#34;https://github.com/mailpile/Mailpile/wiki/Release-Notes-201501-Beta-II&#34;&gt;the release
notes&lt;/a&gt;
and check our &lt;a href=&#34;https://github.com/mailpile/Mailpile/wiki/Security-roadmap&#34;&gt;security
roadmap&lt;/a&gt; so
you know what to expect.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; People upgrading from the older Mac or Windows packages may
want to uninstall the old Mailpile Beta before installing Beta II. Your
data should all remain intact.&lt;/p&gt;
&lt;h2&gt;What&#39;s New?&lt;/h2&gt;
&lt;p&gt;Since our last beta, work has been focused on three things: fixing bugs,
improving the usability of PGP and speeding up the web interface.&lt;/p&gt;
&lt;p&gt;We have made great progress on all of these fronts.&lt;/p&gt;
&lt;p&gt;In particular, many of the bugs in our IMAP implementation have been
ironed out, as has the notorious bug whereby &lt;code&gt;openssl&lt;/code&gt; processes stick
around consuming large amounts of CPU after Mailpile had supposedly been
shut down. Most of the bugs that made the command line interface
unusable were fixed and of course that security issue which we&#39;ll
discuss at the end of this post.&lt;/p&gt;
&lt;p&gt;The usability of our PGP interface was given some serious scrutiny, with
the help of our friends at the Open Internet Tools project. The amazing
&lt;a href=&#34;https://openitp.org/sup/&#34;&gt;Gus Andrews&lt;/a&gt; conducted a series of usability
studies with various types of users, the results of which were &lt;a href=&#34;https://openitp.org/field-notes/user-tests-mailpile-features.html&#34;&gt;posted
on the OpenITP&#39;s
blog&lt;/a&gt;.
Brennan has been working on solutions based on this feedback and many
improvements in Mailpile Beta II are a result of this work. Thank you
Gus and OpenITP! We hope to work more with them in the future - this is
just the beginning!&lt;/p&gt;
&lt;p&gt;Finally, Bjarni went into hiding in Italy to focus on improving the
performance of our web interface. As a result the Beta II release is
noticably snappier than the first Beta, and we expect more improvements
on this front in the near future.&lt;/p&gt;
&lt;p&gt;Many other things are still in progress, including a more &#34;AJAXy&#34; user
interface, a way to safely read HTML mail, a redesign of the way
Mailpile stores its data, reductions in Mailpile&#39;s RAM requirements and
code cleanups to make Mailpile more amenable to Linux distro packaging.
Those features may not be visible in the Beta II user interface, but
people who look under the hood will find traces in the code.&lt;/p&gt;
&lt;h2&gt;Our PGP key size bug&lt;/h2&gt;
&lt;p&gt;That brings us to the security issue which forced us to get our act
together and push this release out the door:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The Mailpile Beta was misconfigured to generate weak PGP keys during
setup.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;To be exact, if a user installed Mailpile and did not already have a PGP
key in their GnuPG keychain, then Mailpile would automatically generate
a new key. Instead of generating a 4096 bit encryption key as we had
planned, we actually generated a 1024 bit key. Oops!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;How did this happen?&lt;/strong&gt;&lt;br /&gt;
  Human error. The key size was lowered to facilitate debugging, and we forgot to raise it again.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Who is affected?&lt;/strong&gt;&lt;br /&gt;
  People who did not already have a PGP key and installed the Mailpile Beta, or installed from github before Jan 5, 2015.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;What is the impact?&lt;/strong&gt;&lt;br /&gt;
  Unless you have powerful enemies, a 1024 bit key is still probably okay. See below for more details.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;How does one fix it?&lt;/strong&gt;&lt;br /&gt;
  Generate a new key, revoke the old one. We have added code to Mailpile to assist with this process. Details below...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&#39;d like to give special thanks to Matt Drollette for sending us a pull
request on github to fix the issue.&lt;/p&gt;
&lt;h3&gt;So how bad is it really?&lt;/h3&gt;
&lt;p&gt;Realistically, there still aren&#39;t many organizations in the world that
can factor 1024 bit keys within a reasonable amount of time. The NSA
certainly can. Its partners probably. Some other large organizations
maybe. There are some attacks that have worked to reduce the keyspace,
but they&#39;re more common on SSL than PGP. So unless your attacker is a
large powerful government, 1024 is probably okay-ish at the moment. And
using a 1024 bit key is certainly far, far better than not using
encryption at all.&lt;/p&gt;
&lt;p&gt;On the other hand, PGP encrypted data tends to stay encrypted that way
for long periods of time, so there is a possibility that somebody could
intercept the encrypted message, store it until factoring 1024 bit RSA
keys is easy, and then decrypt it. That could be anything between years
or decades.&lt;/p&gt;
&lt;p&gt;A lot of people still use 1024 bit RSA keys, but &lt;a href=&#34;http://www.symantec.com/page.jsp?id=1024-bit-migration-faq&#34;&gt;Certificate
Authorities stopped selling new 1024 bit certificates at the end of
2013&lt;/a&gt;,
because they&#39;re simply not good enough.&lt;/p&gt;
&lt;p&gt;Long story short: This isn&#39;t the end of the world, but we recommend you
upgrade your keys as soon as possible.&lt;/p&gt;
&lt;h3&gt;How do you fix it?&lt;/h3&gt;
&lt;p&gt;For that matter, how do you even know if you have a weak key?&lt;/p&gt;
&lt;p&gt;These two questions are closely related, and just writing instructions
for all the different operating systems out there seemed like a daunting
task. So, in order to simplify the process, the Mailpile Beta II
includes code which will evaluate your keychain and suggest improvements
if it finds problems.&lt;/p&gt;
&lt;p&gt;These problems are not limited to weak 1024 bit keys, the checker will
also detect other problems, such as using a key that is scheduled to
expire in the near future, or neglecting to create a key for one of your
outgoing e-mail addresses.&lt;/p&gt;
&lt;p&gt;To give the tool a try, visit the Mailpile command-line interface and
run the &lt;code&gt;crypto/gpg/check_keys&lt;/code&gt; command. It should produce output
similar to this:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
mailpile&gt; crypto/gpg/check_keys

Sanity checked: 4 keys in GPG keyring, 1 profiles.
 - 61A015763D28D410A87B197328191D9B3B4199B4: OK: 4096 bits, looks good!
 - 85EE5D9223806DFCBA630E39EABBE96FD521D78C: --- Disabled.
 - 20FF41634DF6F90ECA4452203CAC6CA6E4D9C373: Bad: expired on 2015-01-16
 - 9858665AC3CA84FEAE2BCAD1E623001E05CE8B43: --- Disabled.

Proposed fixes:
 - Revoke bad keys:
    * Run: `gpg --gen-revoke 20FF41634DF6F90ECA4452203CAC6CA6E4D9C373`
    * Follow the instructions given
    * A block of text will be shown on your screen.
    * Send that block to contacts that have your key.
    * You can search for `is:encrypted to:me` to find people who have it.
- Disable bad keys:
    * Run: `gpg --edit-key 20FF41634DF6F90ECA4452203CAC6CA6E4D9C373`
    * Type `disable`
    * Type `save`
    * You&#39;re done!
&lt;/pre&gt;

&lt;p&gt;The recommended &lt;code&gt;gpg&lt;/code&gt; commands can be run either from a bash shell (or
C: prompt on Windows), or from within Mailpile itself - in order to
allow the instructions to work cross-platform we provide direct access
to &lt;code&gt;gpg&lt;/code&gt; from within the Mailpile command-line itself.&lt;/p&gt;
&lt;p&gt;We are sorry this is not more user friendly, but we had to strike a
balance between making things easy, and getting the word out as soon as
posible. Future versions of Mailpile will hopefully automate more of
this process, detect more problems, and make our &#34;GPG keychain Doctor&#34;
more accessible to people not used to using the command-line.&lt;/p&gt;
&lt;p&gt;It&#39;s a start!&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Thanks for reading this far, and thank you again for all of your
support.&lt;/p&gt;
&lt;p&gt;Now go &lt;a href=&#34;https://github.com/mailpile/Mailpile/wiki/Release-Notes-201501-Beta-II&#34;&gt;check out Mailpile Beta II&lt;/a&gt;!&lt;/p&gt;</description>
    <pubDate>Tue, 20 Jan 2015 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>To PGP/MIME or not to PGP/MIME</title>
    <link>http://www.mailpile.is/blog/2014-11-21_To_PGP_MIME_Or_Not.html</link>
    <description>&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;: PGP/MIME has some serious flaws. I propose specifying an
alternative method for PGP-encrypting e-mail (including attachments)
which improves security while being backwards compatible with legacy
ad-hoc PGP encryption, air-gaps and webmail plugins.&lt;/p&gt;
&lt;h3&gt;How does e-mail encryption work?&lt;/h3&gt;
&lt;p&gt;The world of e-mail encryption can be surprisingly complicated and
convoluted.&lt;/p&gt;
&lt;p&gt;The two standards that we have concentrated on the most in Mailpile, are
OpenPGP (&lt;a href=&#34;https://tools.ietf.org/html/rfc4880&#34;&gt;RFC4880&lt;/a&gt;) and the
PGP/MIME (&lt;a href=&#34;https://tools.ietf.org/html/rfc3156&#34;&gt;RFC3156&lt;/a&gt;) standard which
describes how to encrypt multi-part e-mail messages using OpenPGP.&lt;/p&gt;
&lt;p&gt;In addition to PGP/MIME, there is also the older &#34;ad-hoc&#34; way of sending
encrypted content, which is to simply attach PGP-encrypted files as
attachments or to paste ASCII-armored blobs of encrypted text into the
message body itself.&lt;/p&gt;
&lt;p&gt;To illustrate the difference, a PGP/MIME encrypted message with a single
attachment looks a bit like this:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
  |  From: Alice &amp;lt;a1234@wonderland.com&amp;gt;
  |  To: Bob &amp;lt;b9973@builders.com&amp;gt;
  |  Cc: Jar Jar Binks &amp;lt;omgwtf@lucasfilm.com&amp;gt;
  |  Subject: I have a secret
  |  Content-Type: multipart/encrypted;
  |                protocol=&#34;application/pgp-encrypted&#34;;
  |                boundary=&#34;==12345==&#34;
  |
  |  --==12345==
  |  Content-Type: application/pgp-encrypted
  |  Content-Disposition: attachment
  |
  |  Version: 1
  |
  |  --==12345==
  |  Content-Type: application/octet-stream
  |  Content-Disposition: attachment; filename=&#34;msg.asc&#34;
  |
  |  -----BEGIN PGP MESSAGE-----
  |  Version: GnuPG v1
  |
  E  Content-Type: multipart/mixed; boundary=&#34;==67890==&#34;
  E
  E  --==67890==
  E  Content-Type: text/plain; charset=&#39;utf-8&#39;
  E
  E  I am not wearing any socks!!
  E
  E  --==67890==
  E  Content-Type: image/jpeg
  E  Content-Disposition: attachment; filename=&#34;my-toes.jpg&#34;
  E
  E  [BASE64 ENCODED PICTURE OF NAUGHTY TOES]
  E  --==67890==--
  |  -----END PGP MESSAGE-----
  |
  |  --==12345==--
&lt;/pre&gt;

&lt;p&gt;The clear-text bits are preceded with a &#39;|&#39; and the contents of the
encrypted part with an &#39;E&#39;. The same message, sent using ad-hoc
encryption, might look like this:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
  |  From: Alice &amp;lt;a1234@wonderland.com&amp;gt;
  |  To: Bob &amp;lt;b9973@builders.com&amp;gt;
  |  Cc: Jar Jar Binks &amp;lt;omgwtf@lucasfilm.com&amp;gt;
  |  Subject: I have a secret
  |  Content-Type: multipart/mixed; boundary=&#34;==12345==&#34;
  |
  |  --==12345==
  |  Content-Type: text/plain; charset=&#39;utf-8&#39;
  |
  |  -----BEGIN PGP MESSAGE----
  |  Digest: sha-1
  |
  E  I am not wearing any socks!!
  |  -----END PGP MESSAGE----
  |
  |  --==67890==
  |  Content-Type: application/octet-stream
  |  Content-Disposition: attachment; filename=&#34;my-toes.jpg.pgp&#34;
  |
  E  [BASE64 ENCODED, PGP-ENCRYPTED PICTURE OF NAUGHTY TOES]
  |  --==67890==--
&lt;/pre&gt;

&lt;p&gt;There are noticable differences here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The PGP/MIME encrypted data is formatted as a fragment of MIME data&lt;/li&gt;
&lt;li&gt;The PGP/MIME encrypted message hides how many parts the message has
   and any metadata about them: an outsider cannot tell whether there
   is an attachment or not.&lt;/li&gt;
&lt;li&gt;In the ad-hoc scheme, only the payloads are encrypted&lt;/li&gt;
&lt;li&gt;The ad-hoc scheme loses the mime-type of the attachment&lt;/li&gt;
&lt;li&gt;The ad-hoc scheme leaks the name of the attachment in the clear (or
   loses it, if it gives the attachment a nondescript name)&lt;/li&gt;
&lt;li&gt;The ad-hoc scheme does not protect the integrity of the message, an
   attacher can inject parts or remove parts without Bob being able to
   detect that anything happened.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What does this all mean?&lt;/h3&gt;
&lt;p&gt;When the technical characteristics of the two formats are compared, there
are two major considerations - security and compatibility.&lt;/p&gt;
&lt;p&gt;For ad-hoc encryption, we find:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ad-hoc encryption is not very secure: it leaks or loses metadata, and
   message integrity is not guaranteed.&lt;/li&gt;
&lt;li&gt;Ad-hoc encryption is comptible with legacy mail clients, in that it
   allows the recipient to manually copy all the encrypted parts and
   decrypt &#34;offline&#34;, giving them the opportunity to communicate with some
   security even though their mail client does not understand PGP.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Conversely:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PGP/MIME encryption protects attachment metadata and message structure,
   only the message header is sent in the clear.&lt;/li&gt;
&lt;li&gt;In practice, PGP/MIME is not compatible with legacy mail clients. If
   a user saves and manually decrypts the payload, they will end up with
   a fragment of MIME-encoded data. Tools for working with fragments of
   MIME are not widely available, so for non-technical users the data is
   effectively worthless.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;What does this mean for Mailpile?&lt;/h4&gt;
&lt;p&gt;When trying to design and deploy a user-friendly e-mail encryption tool,
we can&#39;t just consider the interface we present to our own users, we
also have to consider the experience of people receiving our mail. If
it&#39;s illegible, then we have a problem - and that is exactly what is
happening here. If we stick with the more secure PGP/MIME, then it&#39;s
guaranteed that our outgoing messages will be unreadable by a
significant number of users, even if they have PGP keys and know how to
use them.&lt;/p&gt;
&lt;p&gt;Just to clarify, Mailpile absolutely needs to be able to receive and
correctly parse PGP/MIME formatted mail. That is not up for debate - all
secure mail clients should do this, just like all web browsers should
parse and display GIF images. But if better alternatives are available
to us, we probably should avoid creating new content using a format that
is known to have fundamental flaws.&lt;/p&gt;
&lt;h4&gt;What is the impact?&lt;/h4&gt;
&lt;p&gt;Most desktop and some mobile mail clients do support PGP/MIME, but few
do so natively - most require a 3rd party plugin, which is a usability
concern in and of itself.&lt;/p&gt;
&lt;p&gt;When we consider the vast number of webmail users, the situation is much
more grim - there a recipient&#39;s only option is a variation of the manual
download scenario; save attachments and decrypt offline. Webmail
encryption plugins, Mailvelope and Google&#39;s End-To-End being the most
promising at the moment, are merely automating that process and generally
&lt;a href=&#34;https://code.google.com/p/end-to-end/#Which_RFCs_does_End-To-End_support?&#34;&gt;do not support PGP/MIME&lt;/a&gt;.
Although &lt;a href=&#34;https://code.google.com/p/end-to-end/issues/detail?id=32&#34;&gt;Google&#39;s engineers have expressed interest in supporting
PGP/MIME eventually&lt;/a&gt;,
&lt;a href=&#34;https://github.com/mailvelope/mailvelope/issues/41&#34;&gt;as have Mailvelope&#39;s&lt;/a&gt;,
it is not an easy problem and they make no promises about when or how.&lt;/p&gt;
&lt;p&gt;Finally, there is a very small, but disproportionatly important, set of
users (whistle-blowers, activists, spies) who have a need to run their
Internet tools and their encryption tools on separate machines.  An &#34;air
gap&#34; is a low-tech, widely understood method of protecting secret key
material from being compromised. If we send PGP/MIME formatted mail,
air-gapping becomes inconvenient to the point of being infeasible.&lt;/p&gt;
&lt;p&gt;Since usable crypto is our goal, and Mailpile users need to be able to
communicate with people using other mail clients, I feel that real-world
compatibility is marginally more important than dogmatically adhering to
standards and protocols.&lt;/p&gt;
&lt;p&gt;And by that logic, the question changes...&lt;/p&gt;
&lt;h3&gt;Can ad-hoc PGP encryption be made as secure as PGP/MIME?&lt;/h3&gt;
&lt;p&gt;I think maybe it can.&lt;/p&gt;
&lt;p&gt;The problems with ad-hoc encryption (aside from the fact that it is
not very elegant), are as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Metadata is leaked or lost&lt;/li&gt;
&lt;li&gt;Message integrity is not guaranteed&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here are a couple strategies to deal with this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Put all attachments in a ZIP archive, and encrypt that.&lt;/li&gt;
&lt;li&gt;Add an encrypted &#34;Email Manifest&#34; which verifies message integrity
   and carries metadata.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These methods could be combined, or used separately. They are
complementary, but the Email Manifest is actually the more important of
the two.&lt;/p&gt;
&lt;p&gt;Putting attachments in an archive would largely be a matter of
convenience for the recipient, as it allows us to stop transmitting
file-names in the clear, while allowing the user to use standard, well
understood tools to interact with the contents. Without such an archive,
we either have to transmit file names in the clear, or ask users to
rename files by hand.&lt;/p&gt;
&lt;p&gt;The Email Manifest is the more interesting part of this proposal. It not
only allows us to verify the integrity of the message, it also gives us
the opportunity to correct some of the more egregious deficiencies of
PGP/MIME - namely the fact that PGP/MIME transmits the Subject, From,
To, CC and many other critical headers in the clear. PGP/MIME is also
annoyingly picky and ambiguous about how to treat white-space when
verifying signatures.&lt;/p&gt;
&lt;p&gt;Mail clients implementing some sort of &#34;Email Manifest protocol&#34; could
agree to move critical headers out of the main message and into the
encrypted manifest as often as possible, and then reverse the same
process upon decryption. We can make sure the Email Manifest&#39;s
specification deals with white-space in a clear and easy to implement
manner.&lt;/p&gt;
&lt;h4&gt;Another example&lt;/h4&gt;
&lt;p&gt;To revisit our example, an e-mail sent using an Email Manifest approach
might look like this:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
  |  From: a1234@wonderland.com
  |  To: b9973@builders.com
  |  Cc: omgwtf@lucasfilm.com
  |  Subject: Encrypted Message
  |  Content-Type: multipart/mixed; boundary=&#34;==12345==&#34;
  |
  |  --==12345==
  |  Content-Type: text/plain; charset=&#39;utf-8&#39;
  |
  |  -----BEGIN PGP MESSAGE----
  |  Digest: sha-1
  |
  E  From: Alice
  E  To: Bob
  E  Cc: Jar Jar Binks
  E  Subject: I have a secret
  E
  E  I am not wearing any socks!!
  E
  E  Note: this message should have 1 attachment and a manifest.
  |  -----END PGP MESSAGE----
  |
  |  --==67890==
  |  Content-Type: application/octet-stream
  |  Content-Disposition: attachment; filename=&#34;attachment-1.pgp&#34;
  |
  E  [BASE64 ENCODED, PGP-ENCRYPTED PICTURE OF NAUGHTY TOES]
  |  --==67890==
  |  Content-Type: application/pgp-manifest
  |  Content-Disposition: attachment; filename=&#34;manifest.pgp&#34;
  |
  E  Manifest-Version: 1.0
  E  From: Alice &amp;lt;a1234@wonderland.com&amp;gt;
  E  To: Bob &amp;lt;b9973@builders.com&amp;gt;
  E  Cc: Jar Jar Binks &amp;lt;omgwtf@lucasfilm.com&amp;gt;
  E  Subject: I have a secret
  E
  E  Inline: text/plain; sha2sum=&#34;...&#34;; has-pgp; pgp-has-hints
  E  Attachment-1: image/jpeg; filename=&#34;my-toes.jpg&#34;; sha2sum=&#34;...&#34;
  |  --==67890==--
&lt;/pre&gt;

&lt;p&gt;This sample demonstrates how both the message structure and sensitive
headers could be moved into the Email Manifest.&lt;/p&gt;
&lt;p&gt;This example does not use a ZIP archive, so it leaks how many
attachments the mail has and how big they are; building an example
which does use a ZIP archive is left as an exercise for the reader.&lt;/p&gt;
&lt;p&gt;For the benefit of PGP-enabled mail clients unaware of the Manifest,
some important header data and human readable integrity hints could be
injected into the text part itself, while an Email Manifest-aware
client could suppress the duplicate information automatically to avoid
clutter.&lt;/p&gt;
&lt;h4&gt;What does the recipient see?&lt;/h4&gt;
&lt;p&gt;If a recipient&#39;s mail client understands Email Manifests, the message
can be rendered just as nicely as if it were sent using PGP/MIME, with
the added benefit that protected headers can be marked as secure.&lt;/p&gt;
&lt;p&gt;A PGP-aware mail client that doesn&#39;t understand the Manifest will see
simplified headers, and the text-part of the e-mail will have some extra
clutter at the top, From, To, Subject etc, and a notice at the bottom.
The attachments may need to be renamed or extracted from a ZIP archive
before they are useful. They will also see the Email Manifest itself as
an attachment, which they can decrypt and read if they would like to
manually confirm the message was delivered intact.&lt;/p&gt;
&lt;p&gt;A mail client with no support for PGP, will present the user with
encrypted text and attachments they can save to disk for offline
processing.&lt;/p&gt;
&lt;p&gt;So compared to PGP/MIME, this approach improves the security of Mailpile
users (or others supporting Email Manifests), makes life somewhat less
convenient for the users of other PGP/MIME-aware mail software, and
dramatically improves interoperability with mail clients and plugins
that do not understand PGP/MIME, including webmail users.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It is definitely possible to transmit PGP-encrypted messages and
attachments over e-mail in a way which is both more interoperable and
more secure than the PGP/MIME format.&lt;/p&gt;
&lt;p&gt;The question remains - should we?&lt;/p&gt;
&lt;p&gt;This is not a standard, but perhaps it could become one. Messages sent
this way have the potential to be more secure than PGP/MIME, but some of
the features of PGP/MIME will be lost; namely mail-client awareness of
attachment types and probably also support for HTML mail. However, that
may only be a short-term problem, until PGP plugins are upgraded to
understand Email Manifests.&lt;/p&gt;
&lt;p&gt;Is the ZIP archive idea good or bad? It makes some things easier and
both hides and preserves more metadata, but it complicates
implementation and may add extra steps for the recipent. On the other
hand, manually renaming files is no fun and ZIP files may be the lesser
of two evils if we assume we are indeed abandoning PGP/MIME.&lt;/p&gt;
&lt;p&gt;We would like to get feedback on this from people who work with
encrypted e-mail on a day to day basis, security trainers and such
folks, and from folks writing secure e-mail tools. What do you think?
Please mail us at &lt;a href=&#34;mailto:team@mailpile.is&#34;&gt;team@mailpile.is&lt;/a&gt; or tweet
at &lt;a href=&#34;https://twitter.com/MailpileTeam&#34;&gt;@MailpileTeam&lt;/a&gt; if you have
insights to share.&lt;/p&gt;
&lt;p&gt;We&#39;ll also be following &lt;a href=&#34;https://news.ycombinator.com/item?id=8648587&#34;&gt;comments on Hacker News&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</description>
    <pubDate>Fri, 21 Nov 2014 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>Some thoughts on working with GnuPG</title>
    <link>http://www.mailpile.is/blog/2014-10-07_Some_Thoughts_on_GnuPG.html</link>
    <description>&lt;p&gt;A lot of people have complained about OpenPGP for a number of valid cryptographical reasons&lt;a href=&#34;http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html&#34;&gt;1&lt;/a&gt;,&lt;a href=&#34;http://secushare.org/PGP&#34;&gt;2&lt;/a&gt;. It doesn&#39;t change the fact that it is widely used, and wildly useful. It urgently needs to be replaced with something more sensible, but for now we&#39;re stuck with it. In practice, this also means that we are stuck with GnuPG, the most common and by far the best implementation of OpenPGP.&lt;/p&gt;
&lt;p&gt;GnuPG is the one and only reference implementation of &lt;a href=&#34;http://tools.ietf.org/html/rfc4880&#34;&gt;RFC 4880&lt;/a&gt;, and despite thousands of companies making use of OpenPGP in their infrastructre there is for all intents and purposes a solitary dude in Germany trying to keep it all together. &lt;a href=&#34;http://werner.eifelkommune.de/&#34;&gt;Werner Koch&lt;/a&gt; is an absolute hero for managing to do that, and deserves our respect and support. Financially supporting the GnuPG project is also something people should be doing. &lt;/p&gt;
&lt;p&gt;The following is however neccessary and hopefully constructive criticism of GnuPG.&lt;/p&gt;
&lt;p&gt;One of the things I&#39;m largely to blame for in Mailpile is the GnuPG interface. It&#39;s a chunk of Python code that executes the GnuPG binary, tosses information at it, and figures out what to do with the output. There are lots of libraries for doing this, but after a great deal of exploration I found that all of the Python libraries that did this were insufficient for our needs, and the only thing crazier than manually forking out GnuPG in our situation would be to use the PGPME library.&lt;/p&gt;
&lt;p&gt;PGPME is almost as confusing and annoying as calling GnuPG directly, but it also requires us to ship architecture-specific libraries to everybody, something we&#39;re actively avoiding. Having to ship GnuPG binaries to Windows and MacOS users is bad enough, but dependency hell is a place we want to stay out of. If we were writing Mailpile in, say, C or C++, then PGPME would definitely be the library of choice, but we&#39;re not, so it isn&#39;t. On top of that, the available &lt;a href=&#34;http://pyme.sourceforge.net/&#34;&gt;Python bindings for PGPME&lt;/a&gt; are very flaky (last updated in 2008!), and not developed or maintained by the GnuPG team.&lt;/p&gt;
&lt;p&gt;As a result, we&#39;ve got a roughly 1200 line chunk of code in Mailpile that has the fun and useful task of chatting with GnuPG, and the stupifyingly annoying task of working around all of GnuPG&#39;s inconsistencies.&lt;/p&gt;
&lt;p&gt;The problems with GnuPG seem to fall roughly into two broad categories: inconsistent output structure, inconsistent interfaces. These are both ripe with surprising behaviour and confusing failure modes. In addition to these categories, it appears that the larger meta problem is that no single statement about its problems is going to remain a stable statement, as these problems disappear and reappear at odd intervals as new versions are being built. The number of moving parts essentially leads to a lot of confusion about whether a particular bug exists in a particular version or not, and whether it is affected by wind speed. To wit, I have over the course of Mailpile development added, removed, and readded a workaround for a bug, although I think I&#39;m safe to say that it does not exist post GnuPG 2.1. The comment of that workaround in the code illustrates the issue perfectly:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
def list_secret_keys(self):
       #
       # Note: The &#34;.&#34; parameter that is passed is to work around a bug
       #       in GnuPG &lt; 2.1, where --list-secret-keys does not list
       #       details about key capabilities or expiry for
       #       --list-secret-keys unless a selector is provided. A dot
       #       is reasonably likely to appear in all PGP keys, as it is
       #       a common component of e-mail addresses (and @ does not
       #       work as a selector for some reason...)
       #
       #       The downside of this workaround is that keys with no e-mail
       #       address or an address like alice@localhost won&#39;t be found.
       #       Therefore, this paramter should be removed when GnuPG &gt;= 2.1
       #       becomes commonplace.
       #
       #       (This is a better workaround than doing an additional
       #       --list-keys and trying to aggregate it though...)
       #
       #       BRE: Put --fingerprint at the front and added selectors
       #            for the worlds MOST POPULAR LETTERS!  Yaaay!
       #
       retvals = self.run([&#34;--fingerprint&#34;,
                           &#34;--list-secret-keys&#34;, &#34;.&#34;,
                           &#34;--list-secret-keys&#34;, &#34;a&#34;,
                           &#34;--list-secret-keys&#34;, &#34;e&#34;,
                           &#34;--list-secret-keys&#34;, &#34;i&#34;,
                           &#34;--list-secret-keys&#34;, &#34;p&#34;,
                           &#34;--list-secret-keys&#34;, &#34;t&#34;,
                           &#34;--list-secret-keys&#34;, &#34;k&#34;])
       return self.parse_keylist(retvals[1][&#34;stdout&#34;])
&lt;/pre&gt;

&lt;p&gt;This bug exists in the first category:&lt;/p&gt;
&lt;h3&gt;Inconsistent output structure&lt;/h3&gt;
&lt;p&gt;GnuPG &lt;em&gt;generally&lt;/em&gt; accepts command line parameters, uses these to perform actions, and returns output. The output generally takes two forms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Line by line descriptive output, such as when listing keys&lt;/li&gt;
&lt;li&gt;Bulk output, such as when encrypting, decrypting, or signing&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The line-by-line output has two modes, the normal mode where the data is tabulated with spaces into mostly nice, if somewhat confusing columns, and the &lt;code&gt;--with-colons&lt;/code&gt; mode, where the spaces are replaced with colons, for easy parsing. This is quite clever and good. The problem arises when one intends to start parsing this data.&lt;/p&gt;
&lt;p&gt;First, a word on discoverability. If you ever intend to do anything with GnuPG, you first need to read and internalize a document aptly titled &lt;code&gt;DETAILS&lt;/code&gt;, which contains a lot of the details about what&#39;s going on with GnuPG output. I have dutifully read, memorized chunks of, and bookmarked this file for posterity. It is immensely helpful. For example, it gives an example of GnuPG&#39;s output:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
$ gpg --with-colons --list-keys \
      --with-fingerprint --with-fingerprint wk@gnupg.org
pub:f:1024:17:6C7EE1B8621CC013:899817715:1055898235::m:::scESC:
fpr:::::::::ECAF7590EB3443B5C7CF3ACB6C7EE1B8621CC013:
uid:f::::::::Werner Koch &lt;wk@g10code.com&gt;:
uid:f::::::::Werner Koch &lt;wk@gnupg.org&gt;:
sub:f:1536:16:06AD222CADF6A6E1:919537416:1036177416:::::e:
fpr:::::::::CF8BCC4B18DE08FCD8A1615906AD222CADF6A6E1:
sub:r:1536:20:5CE086B5B5A18FF4:899817788:1025961788:::::esc:
fpr:::::::::AB059359A3B81F410FCFF97F5CE086B5B5A18FF4:
&lt;/pre&gt;

&lt;p&gt;In order to decipher what this all means, you need to refer to rest of the document. This shows the &lt;code&gt;--with-colons&lt;/code&gt; format, which is the way we want to be working with it.&lt;/p&gt;
&lt;p&gt;Now here comes issue the first: this is essentially a colon separated value (CSV!) data structure, but the data being provided is a) inconsistent, and b) structured.&lt;/p&gt;
&lt;p&gt;Notably, the first output line says &#34;there is a public key,&#34; and the line after it says &#34;here is a fingerprint.&#34; Naively one might think that these are unrelated. But in fact, all of the lines from the one starting with &lt;code&gt;pub&lt;/code&gt; up to the next one that starts with either &lt;code&gt;pub&lt;/code&gt; or &lt;code&gt;sec&lt;/code&gt; are actually details about the nature of the public key mentioned in the &lt;code&gt;pub&lt;/code&gt; line - although to make things worse, the &lt;code&gt;fpr&lt;/code&gt; lines after the &lt;code&gt;sub&lt;/code&gt; lines refer to the &lt;code&gt;sub&lt;/code&gt; line but not the &lt;code&gt;pub&lt;/code&gt; line. Confused yet?&lt;/p&gt;
&lt;p&gt;In reality, parsing this isn&#39;t too terrible, but it can only be done in a reasonable way if you understand the structure of PGP keys and the output format of GnuPG. These are &lt;em&gt;not&lt;/em&gt; reasonable assumptions for GnuPG to be making. Even armed with knowledge about the structure of keys and the handy &lt;code&gt;DETAILS&lt;/code&gt; document, my first version of a parser was overly generic and terribly inefficient, because I kept trying to avoid inconsistencies.&lt;/p&gt;
&lt;p&gt;Now, the inconsistencies start to get exciting around about here.&lt;/p&gt;
&lt;p&gt;Notice these two lines:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
pub:f:1024:17:6C7EE1B8621CC013:899817715:1055898235::m:::scESC:
fpr:::::::::ECAF7590EB3443B5C7CF3ACB6C7EE1B8621CC013:
&lt;/pre&gt;

&lt;p&gt;These both follow the same output format, according to &lt;code&gt;DETAILS&lt;/code&gt;. But look what happens when I add spaces to align the columns:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
pub:f:1024:17:6C7EE1B8621CC013:899817715:1055898235::m:                                        ::scESC:
fpr: :    :  :                :         :          :: :ECAF7590EB3443B5C7CF3ACB6C7EE1B8621CC013:
&lt;/pre&gt;

&lt;p&gt;Some of the columns are meaningless for some of the output lines, but more shockingly, some of the columns are MISSING sometimes. Three of the columns just simply evaporate if the line is an &lt;code&gt;fpr&lt;/code&gt;-type line. On top of that, there&#39;s no really good reason why the fingerprint needs to be a separate output line rather than just being added in at the right place. According to the &lt;code&gt;DETAILS&lt;/code&gt; file, field 10 is for &#34;User ID&#34; - which is to say, the name, e-mail address, and comment associated with the key. Things that the fingerprint emphatically is not.&lt;/p&gt;
&lt;p&gt;It this point you&#39;ll notice that field 5 contains the Key ID. And for added pain, the key ID is variously the last 8 or the last 16 nibbles (hexadecimal digits) of the fingerprint.&lt;/p&gt;
&lt;p&gt;Frustrated yet? Me too. But let&#39;s just wave the rest of this category away, and move on to the next:&lt;/p&gt;
&lt;h3&gt;Inconsistent interfaces&lt;/h3&gt;
&lt;p&gt;So let&#39;s imagine you want to generate a key. Sounds like a reasonable thing to do, right? So we&#39;re all hip and cool and want to do so programatically with our shiny command line interface to GnuPG, so naturally we think it&#39;ll look something like:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
$ gpg --gen-key --name Smári McCarthy --email smari@mailpile.is --algorithm RSA --keysize 4096 --expires 2017-10-06
&lt;/pre&gt;

&lt;p&gt;... or something to that effect. And have sensible defaults for any parameters that are skipped, or otherwise make them required. Right?&lt;/p&gt;
&lt;p&gt;Wrong.&lt;/p&gt;
&lt;p&gt;GnuPG does have a &lt;code&gt;--gen-key&lt;/code&gt; flag, but when you call it you are dropped into an interactive interface where you are forced to answer questions, one at a time. In varying order, depending on the version, it seems.&lt;/p&gt;
&lt;p&gt;The only sensible programmatic way to deal with this is to use &#34;expect&#34; style scripts, where your script captures the output and provides programmatic input depending on what the application last said. These used to be used a lot in the 80&#39;s, but have fallen out of favour because: a) they make internationalization a nightmare, b) they make changing versions of software a nightmare, and c) they are almost never the right way to do anything.&lt;/p&gt;
&lt;p&gt;They do work though. Kind of. Until they break, and it&#39;ll be hell to debug them.&lt;/p&gt;
&lt;p&gt;Now, avid users of GnuPG will at this point mention the &lt;code&gt;--batch&lt;/code&gt; option, which allows in this case for providing options to the key generator in yet another format. Except, of course, that if you want to do something entirely reasonable like add more than one UID (for instance if you have multiple e-mail addresses) to a new key, you can&#39;t. &lt;code&gt;--batch&lt;/code&gt; just doesn&#39;t support it.&lt;/p&gt;
&lt;p&gt;So your options are to either painfully generate through using expect-style scripts, or use batch and then edit the key afterwards to add uids. Except that the &lt;code&gt;--edit-key&lt;/code&gt; also relies on an interface which requires the use of expect-style scripts, so you just gained nothing.&lt;/p&gt;
&lt;p&gt;Another thing that frequently happens when using encryption software with slow algorithms (such as secure pseudorandom number generation or RSA) is that you have to wait a long time for things to happen. When you&#39;re making software with nice user interfaces, you sometimes start thinking that showing some kind of intermediate progress would be a nice thing to do. This is where we get to GnuPG&#39;s wonderful status file descriptor.&lt;/p&gt;
&lt;p&gt;Really, the status descriptor is awesome. It gives me lots of information that is valuable and can make life a lot better. There are however a few shortcomings. First, contrary to all other file descriptors that you may work with in GnuPG, the status descriptor is not guaranteed to give you a newline character at the end of a status, which renders a bunch of sensible methods of reading input from it unreliable and requires that I handle that descriptor with special magic. Nor are you strictly guaranteed to only get statuses. I have on occasion run into blank lines and other weirdness that needs to be stripped. Once those quirks are all managed, the status descriptor is actually invaluable and should not be overlooked -- specially when mixed with the &lt;code&gt;--enable-progress-filter&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;The biggest complaint about the status descriptor is that it cannot be relied upon as a flow control mechanism. It does not always give output, or indicate the appropriate sequence of things, so an interface can use it for the purpose of increasing their information about the current situation, but not as a replacement for constant reading and parsing of the STDOUT and STDERR handles, and certainly not as a replacement for in-depth understanding of which order things happen in.&lt;/p&gt;
&lt;p&gt;Actually, it should also be mentioned that as nice as it is to have all these descriptors, heavy use of descriptors turns into a world of problems on Windows. Windows is finicky enough as it is. Our solution was passing the status through to STDERR, which really works kind of fine.&lt;/p&gt;
&lt;p&gt;Speaking of order, consider this handling of the passphrase descriptor -- a special descriptor for accepting a passphrase sent by the user as part of a wrapper-mediated communication (because nobody ever uses pipes like that on the command line), from GnuPG&#39;s &lt;code&gt;gpg.c&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
    ...
    if( pwfd != -1 )  /* Read the passphrase now. */
    read_passphrase_from_fd( pwfd );
    ...
    switch (cmd)
      {
      case aPrimegen:
      case aPrintMD:
      ...
&lt;/pre&gt;

&lt;p&gt;The interesting thing (aside from the annoying and dangerous lack of indentation on that if statement) is the way in which the passphrase is read from the password descriptor before the commands are managed. Which is to say, the passphrase &lt;em&gt;must&lt;/em&gt; be sent, and, due to the way read_passphrase_from_fd is written, that descriptor closed on the sending end, before &lt;em&gt;anything&lt;/em&gt; else happens. Which means that you need to know at the time of execution of the GnuPG binary that you need to send a passphrase, if you are going to do so programatically. This gives you three options: a) Send it every single time (requires storing the passphrase on the calling side, typically in insecure memory), b) Be willing to execute the same command twice, capturing potential errors on the first try and figuring out that they are due to a lack of passphrase -- something the error message will not always be clear about, or c) keep track of the entirety of GnuPG&#39;s internal state, which would be absolutely insane, even if it weren&#39;t version dependent. &lt;/p&gt;
&lt;p&gt;This behaviour is not obvious, or particularly reasonable, let alone documented. Figuring this out took a long time. &lt;/p&gt;
&lt;p&gt;If you&#39;ve seen Mailpile&#39;s Windows and MacOS releases, you&#39;ll have noticed that we are shipping slightly old versions of GnuPG. The reason for this is that we figured out pretty late that the passphrase-fd is not the correct way to do things and has been disabled in more recent versions of GnuPG in favour of expanded use of things that implement the gpg-agent mechanism. So Mailpile should be a gpg-agent. &lt;/p&gt;
&lt;p&gt;(It is notable that several distributions still have GnuPG 1.4 as the default instead of GnuPG 2.x...)&lt;/p&gt;
&lt;p&gt;The reason for this is that Mailpile provides a web interface, and in some of its use cases, it will do so from a server which is not necessarily capable of rendering a GTK window or provide a terminal prompt on the user&#39;s device. So despite all of the reasons why people might not want to shift a PGP passphrase over a SSL connection, it might still be something people will want to do, and we need to be ready for that contingency. So we need to accept the passphrase through a web form, and pass it back to GnuPG one way or another. (Note: the generic case is Mailpile running on localhost, which is always a fine thing to do. Even over HTTP. Normal threat model limitations apply.)&lt;/p&gt;
&lt;p&gt;All of this is weird and annoyingly inconsistent. This category of problems probably doubled our interface in size and complexity, and made error handling an absolute nightmare. &lt;/p&gt;
&lt;h3&gt;The Error Handling Issue&lt;/h3&gt;
&lt;p&gt;When writing a library like this, we need to be able to anticipate errors from GnuPG and respond appropriately. The number of different and confusing ways of receiving information also means that there are a number of different and confusing ways to receive error statuses and such. Sometimes the return value is useful, but frequently it is not. Sometimes there is something on the status descriptor, or on STDERR. Often both, sometimes neither. The entire thing is maddening.&lt;/p&gt;
&lt;p&gt;The approach we&#39;ve had to take is the opposite of what would be preferable. It is simply to check if the positive output we&#39;re getting from GnuPG is roughly of the sort that we were expecting, and assume that if it isn&#39;t, an error has occurred. As a general error handling strategy this is idiotic, we know, and we&#39;d like it to stop.&lt;/p&gt;
&lt;h3&gt;What can be done?&lt;/h3&gt;
&lt;p&gt;The short answer is the same as &lt;a href=&#34;http://blog.cryptographyengineering.com/2014/08/whats-matter-with-pgp.html&#34;&gt;Matt Green&#39;s answer&lt;/a&gt;: It is time for PGP to die -- or rather, RFC 4880 needs to be cleaned up, simplified, and replaced. PGP in its current form needs to evolve. There are a lot of very good reasons why, which &lt;a href=&#34;http://secushare.org/PGP&#34;&gt;Carlos has neatly catalogued&lt;/a&gt;. But realistically, PGP is what people use for e-mail, and until we have widespread adoption of crypto in e-mail &lt;em&gt;at all&lt;/em&gt;, trying to replace PGP is just going to cause painful fragmentation. Since one of Mailpile&#39;s goals is to get millions of people encrypting their e-mail by default, we can&#39;t risk this fragmentation right now. If we round to the closest &lt;a href=&#34;http://en.wikipedia.org/wiki/Lakh&#34;&gt;lakh&lt;/a&gt;, zero people currently encrypt their e-mail. This is &lt;a href=&#34;http://smarimccarthy.is/blog/2014/05/27/big-silos-small-privacy/&#34;&gt;scary&lt;/a&gt; and &lt;a href=&#34;http://smarimccarthy.is/blog/2014/05/28/engineering-our-way-out-of-fascism/&#34;&gt;bad&lt;/a&gt;. The way forward is not to throw PGP out, but to start thinking seriously about what replaces RFC 4880.&lt;/p&gt;
&lt;p&gt;But we&#39;re stuck with RFC 4880. For now. A standard that is, for better or worse, being maintained entirely by one man.&lt;/p&gt;
&lt;p&gt;Which gives us four options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stick with GnuPG and improve it substantially.&lt;/li&gt;
&lt;li&gt;Fork GnuPG and improve it substantially.&lt;/li&gt;
&lt;li&gt;Replace GnuPG with something simpler and more consistent.&lt;/li&gt;
&lt;li&gt;Give up.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;None of those approaches is good. I&#39;m going to take option four off the table immediately because we&#39;re not going to give up.&lt;/p&gt;
&lt;p&gt;Option two is essentially the hostile version of option one, so I&#39;ll write it off immediately. The people who&#39;ve been developing GnuPG are great and we really like them. So we won&#39;t be forking GnuPG anytime soon -- heck, even if we did want to do that, we&#39;d still not have any time to actually work on it.&lt;/p&gt;
&lt;p&gt;Option three sounds most sensible long-term. Cruft is unavoidable, but Google&#39;s End-to-End might potentially serve as the basis for &#34;minimum viable PGP&#34;. But End-to-End is also written in Javascript, and while people are entirely free to call me old-fashioned, I&#39;d like the GnuPG replacement to be written in a compiled systems language.&lt;/p&gt;
&lt;p&gt;But long term is long term. Short term, the only option is to stick with GnuPG.&lt;/p&gt;
&lt;p&gt;I&#39;d therefore like to propose the following:&lt;/p&gt;
&lt;h3&gt;GnuPG JSON Mode&lt;/h3&gt;
&lt;p&gt;As I mentioned, a lot of GnuPG&#39;s output is actually structured a lot more than the output format supports. In our work so far, we&#39;ve managed to build reasonable JSON structures out of that output for a lot of things. Completing that work and expanding on it, it would be possible to support something like this:&lt;/p&gt;
&lt;pre class=&#34;add-bottom&#34;&gt;
 $ gpg --json &#39;{query}&#39;
 {response1}
 {response2}
 ...
 {responseN}
&lt;/pre&gt;

&lt;p&gt;This would be relatively easy to build atop of GnuPG&#39;s current source code, making the &lt;code&gt;--json&lt;/code&gt; flag preempt all else in the way &lt;code&gt;--batch&lt;/code&gt; currently does. Then it uses a well supported library to parse the query, figure out what it is doing, call the appropriate internal functionality, and return the right data structures, also JSON encoded.&lt;/p&gt;
&lt;p&gt;In order to support intermediate results, status descriptor style, an arbitrary number of results is allowed. They need not be comma separated, because we want our input parser to be able to pick them up one by one. Rather, just end each response block with a newline.&lt;/p&gt;
&lt;p&gt;Have GnuPG exit after the last response.&lt;/p&gt;
&lt;p&gt;With this, anybody implementing a GnuPG interface will be able to do all the magic relatively easily. The data structures can be well documented. Everything can become easy. I will stop losing my hair.&lt;/p&gt;
&lt;p&gt;Somebody might ask, what about PGPME? Frankly, PGPME is great for a particular subset of GnuPG users. They can keep using it if they want. But if &lt;code&gt;--json&lt;/code&gt; exists and is consistent and comprehensive, everybody will use that. Trust me.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;GnuPG is important and great in many ways, but it is also deeply broken and downright dangerous. The sooner it becomes a consistent tool, the sooner it will become something other than a fool&#39;s errand to attempt to interface with it. I&#39;m happy to be on the caravan of fools for now, but only if there is something worthwhile at the end of this quest.&lt;/p&gt;
&lt;p&gt;Software is hard. Security software is harder. Werner is doing great at managing a very shit situation, created by RFC 4880. I think there is a real possibility to make GnuPG way better. For now, we need JSON mode. I&#39;m sure crowdfunding this work is possible, because we need it. I for one will put some cash down for this bounty. Join me?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; &lt;a href=&#34;/blog/2015-02-26_Revisiting_the_GnuPG_discussion.html&#34;&gt;We have written a follow-up
post&lt;/a&gt;.&lt;/p&gt;</description>
    <pubDate>Tue, 07 Oct 2014 12:00:00 +0000</pubDate>
  </item>
  <item>
    <title>One Year Later: Mailpile Beta</title>
    <link>http://www.mailpile.is/blog/2014-09-13_Mailpile_Beta_Release.html</link>
    <description>&lt;p&gt;&lt;img src=&#34;/files/Beta-Time-Icons.png&#34; border=&#34;0&#34;&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s been almost exactly a year since our crowdfunding campaign ended and we realized that building Mailpile really would become our full time job. We are very grateful to be given this chance and have been working hard ever since.&lt;/p&gt;
&lt;p&gt;It&#39;s been a busy year, with ups and downs, highs and lows, stickers and t-shirts and hackathons and conferences. If you&#39;ve been following Mailpile&#39;s development over the past year, you&#39;ll have seen the codebase mature from a rough prototype into a usable app, the protocol support grow and expand, and the UI mature by leaps and bounds. You&#39;ll also have seen blog posts about delays and long stretches of silence as we doubled down and immersed ourselves in hard work.&lt;/p&gt;
&lt;p&gt;Since we started development last fall, we&#39;ve released two Alpha versions. The first one was a very rough technology preview focusing on the basic capabilities - our built in webserver, the core Mailpile commands, a REST API, the search engine, and basic support for sending and reading encrypted email. We released an updated Alpha II this summer, which featured advanced UI, support for mail sources, and more.&lt;/p&gt;
&lt;p&gt;Now, it&#39;s time for our Beta release!&lt;/p&gt;
&lt;h3&gt;What&#39;s in a Beta?&lt;/h3&gt;
&lt;p&gt;We believe in the old-fashioned kind of beta-release - a release that has most of the features of a 1.0, but may lack polish and maturity. Polish and maturity can only come from exposure to a wider range of users than the core team of developers and our friends. So although we are a little bashful about how many bugs remain and how many exciting features didn&#39;t make the cut-off, we feel it is time to share our work with a wider audience.&lt;/p&gt;
&lt;p&gt;So please give it a try and let us know how it works. But please understand that this is still not a finished product.&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&#34;https://github.com/pagekite/Mailpile/wiki/Release-Notes-201409-Beta&#34;&gt;Release Notes&lt;/a&gt; cover some of the technicalities, as does our &lt;a href=&#34;https://github.com/pagekite/Mailpile/wiki/Security-roadmap&#34;&gt;Security Roadmap&lt;/a&gt;. Please read them!  In particular, it&#39;s worth taking a look at the list of known issues, so you aren&#39;t caught off guard by one of our many known bugs. Taking a look at the known issues list will also help reduce the load on us developers - the fewer people file bugs for stuff we already know about, the less time we have to spend curating our bug tracker and the more time we can spend actually fixing things!&lt;/p&gt;
&lt;h3&gt;The good news and...&lt;/h3&gt;
&lt;p&gt;For those of you too busy to read the full release notes, here is the good news:&lt;/p&gt;
&lt;ul class=&#34;square&#34;&gt;
  &lt;li&gt;Getting started is easy: Mailpile now sports a user-friendly interactive setup flow&lt;/li&gt;
  &lt;li&gt;Reading and writing e-mail works, including attachments&lt;/li&gt;
  &lt;li&gt;Our searching and tagging engine can handle hundreds of thousands of messages&lt;/li&gt;
  &lt;li&gt;The user interface is clean and elegant, and our font now looks great in all browsers &amp; weights&lt;/li&gt;
  &lt;li&gt;The spam filter works well (as long as you correct its mistakes now and then)&lt;/li&gt;
  &lt;li&gt;Our OpenPGP support is convenient and easy to work with, including searching for &amp; importing keys&lt;/li&gt;
  &lt;li&gt;We have packages for Windows and the Mac!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of the things that still need work:&lt;/p&gt;
&lt;ul class=&#34;square&#34;&gt;
  &lt;li&gt;The user interface has not been optimized, so it can be quite slow now and then&lt;/li&gt;
  &lt;li&gt;The user interface needs some improvements to work well on smaller screens&lt;/li&gt;
  &lt;li&gt;We need to integrate Tor to better protect our users&#39; privacy&lt;/li&gt;
  &lt;li&gt;We wrote code too fast and our translators couldn&#39;t really keep up&lt;/li&gt;
  &lt;li&gt;There are still lots of bugs that need fixing!&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Where can I get it?&lt;/h3&gt;
&lt;p&gt;The Mailpile beta is released in 4 forms:&lt;/p&gt;
&lt;div class=&#34;add-bottom&#34;&gt;
&lt;h5 class=&#34;half-bottom&#34;&gt;Online Demo&lt;/h5&gt;
View our &lt;a href=&#34;https://www.mailpile.is/demos/&#34;&gt;online demo here&lt;/a&gt;
&lt;/div&gt;

&lt;div class=&#34;add-bottom&#34;&gt;
&lt;h5 class=&#34;half-bottom&#34;&gt;&lt;img src=&#34;/img/os-windows.png&#34; border=&#34;0&#34; style=&#34;height:24px;&#34;&gt; Windows Installer&lt;/h5&gt;
Download via: &lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.exe&#34;&gt;HTTPS&lt;/a&gt; or &lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.exe.torrent&#34;&gt;Bittorrent&lt;/a&gt; (faster)&lt;br&gt;
&lt;em&gt;Checksums: &lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.exe.sha1&#34;&gt;sha1&lt;/a&gt; &amp;nbsp;&lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.exe.md5&#34;&gt;md5&lt;/a&gt;&lt;/em&gt;
&lt;/div&gt;

&lt;div class=&#34;add-bottom&#34;&gt;
&lt;h5 class=&#34;half-bottom&#34;&gt;&lt;img src=&#34;/img/os-mac.png&#34; border=&#34;0&#34; style=&#34;height:24px;&#34;&gt; Mac OS Installer&lt;/h5&gt;
Download via: &lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.dmg&#34;&gt;HTTPS&lt;/a&gt; or &lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.dmg.torrent&#34;&gt;Bittorrent&lt;/a&gt; (faster)&lt;br&gt;
&lt;em&gt;Checksums: &lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.dmg.sha1&#34;&gt;sha1&lt;/a&gt; &amp;nbsp;&lt;a href=&#34;https://www.mailpile.is/files/releases/Mailpile-Installer-Beta.dmg.md5&#34;&gt;md5&lt;/a&gt;&lt;/em&gt;
&lt;/div&gt;

&lt;div class=&#34;add-bottom&#34;&gt;
&lt;h5 class=&#34;half-bottom&#34;&gt;&lt;img src=&#34;/img/os-linux.png&#34; border=&#34;0&#34; style=&#34;height:24px;&#34;&gt; Linux&lt;/h5&gt;
As a &lt;a href=&#34;https://github.com/pagekite/Mailpile/releases&#34; target=&#34;_blank&#34;&gt;tagged source release on Github&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;So give it a spin, seed our torrents and let us know what you think. :-)&lt;/p&gt;
&lt;p&gt;In the meantime, we&#39;re going to get back to work. We still have 3-4 months worth of money in the bank, which should be exactly the right amount to get our 1.0 shipped in time for the New Year. Fingers crossed!&lt;/p&gt;
&lt;p&gt;Hugs and ciphers,&lt;br /&gt;
  ~The Mailpile team&lt;/p&gt;
&lt;p&gt;P.S. Check out &lt;a href=&#34;https://news.ycombinator.com/item?id=8315086&#34;&gt;this Hacker News&lt;/a&gt;
post to discuss!&lt;/p&gt;</description>
    <pubDate>Sat, 13 Sep 2014 12:00:00 +0000</pubDate>
  </item>
</channel></rss>